version: '3.3'

services:
  traefik:
    # Use the latest v2.2.x Traefik image available
    image: traefik:v2.2
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=ladislas.dellinger@imt-atlantique.net
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      - traefik.constraint-label=traefik-public
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD
      - traefik.http.middlewares.admin-auth.basicauth.users=around:$apr1$k4UM095D$ByVjZQLFesUPFNP79z6T.1
      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable DOMAIN
      - traefik.http.routers.traefik-public-http.rule=Host(`traefik.lad-dev.team`)
      - traefik.http.routers.traefik-public-http.entrypoints=http
      - traefik.http.routers.traefik-public-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable DOMAIN
      - traefik.http.routers.traefik-public-https.rule=Host(`traefik.lad-dev.team`)
      - traefik.http.routers.traefik-public-https.entrypoints=https
      - traefik.http.routers.traefik-public-https.tls=true
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-public-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-public-https.tls.certresolver=le
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.traefik-public-https.middlewares=admin-auth
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-public.loadbalancer.server.port=8080

  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tskI8GzBCnOKANui}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - '5432:5432'
    networks:
      - postgres
    restart: unless-stopped

  api:
    image: ladislas14/sea-eu-around:latest
    env_file: .production.env
    ports:
      - '3000:3000'
      - '4000:4000'
    restart: always
    networks:
      - traefik-public
      - postgres
    links:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.sea-around-prod-api-http.rule=Host(`api.sea-eu-around.univ-brest.fr`)
      - traefik.http.routers.sea-around-prod-api-http.entrypoints=http
      - traefik.http.routers.sea-around-prod-api-http.middlewares=https-redirect
      - traefik.http.routers.sea-around-prod-api-https.rule=Host(`api.sea-eu-around.univ-brest.fr`)
      - traefik.http.routers.sea-around-prod-api-https.entrypoints=https
      - traefik.http.routers.sea-around-prod-api-https.tls=true
      - traefik.http.routers.sea-around-prod-api-https.tls.certresolver=le
      - traefik.http.services.sea-around-prod-api.loadbalancer.server.port=3000

  forest:
    image: seaeuaround/admin:latest
    env_file: .admin.env
    ports:
      - 3310:3310
    restart: always
    networks:
      - traefik-public
      - postgres
    links:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.sea-around-prod-forest-http.rule=Host(`admin.lad-dev.team`)
      - traefik.http.routers.sea-around-prod-forest-http.entrypoints=http
      - traefik.http.routers.sea-around-prod-forest-http.middlewares=https-redirect
      - traefik.http.routers.sea-around-prod-forest-https.rule=Host(`admin.lad-dev.team`)
      - traefik.http.routers.sea-around-prod-forest-https.entrypoints=https
      - traefik.http.routers.sea-around-prod-forest-https.tls=true
      - traefik.http.routers.sea-around-prod-forest-https.tls.certresolver=le
      - traefik.http.services.sea-around-prod-forest.loadbalancer.server.port=3310

  minio:
    image: minio/minio:RELEASE.2021-06-07T21-40-51Z
    hostname: minio
    volumes:
      - data-minio:/data
    ports:
      - '9000:9000'
    networks:
      - traefik-public
    env_file: .minio.env
    command: server /data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.minio-http.rule=Host(`cdn.sea-eu-around.univ-brest.fr`)
      - traefik.http.routers.minio-http.entrypoints=http
      - traefik.http.routers.minio-http.middlewares=https-redirect
      - traefik.http.routers.minio-https.rule=Host(`cdn.sea-eu-around.univ-brest.fr`)
      - traefik.http.routers.minio-https.entrypoints=https
      - traefik.http.routers.minio-https.tls=true
      - traefik.http.routers.minio-https.tls.certresolver=le
      - traefik.http.services.minio.loadbalancer.server.port=9000

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:
  postgres:
  data-minio:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
  postgres:
    driver: bridge
