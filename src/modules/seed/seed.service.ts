import { Injectable } from '@nestjs/common';
import * as faker from 'faker';
import { float } from 'random';

import { DegreeType } from '../../common/constants/degree-type';
import { EducationFieldType } from '../../common/constants/education-field-type';
import { GenderType } from '../../common/constants/gender-type';
import { LanguageLevelType } from '../../common/constants/language-level-type';
import { LanguageType } from '../../common/constants/language-type';
import { NationalityType } from '../../common/constants/nationality-type';
import { ProfileType } from '../../common/constants/profile-type';
import { RoleType } from '../../common/constants/role-type';
import { PartnerUniversityDomain } from '../../common/constants/sea';
import { StaffRoleType } from '../../common/constants/staff-role-type';
import { ProfileEntity } from '../../entities/profile.entity';
import { UserEntity } from '../../entities/user.entity';
import { InterestRepository } from '../../repositories/interest.repository';
import { OfferRepository } from '../../repositories/offer.repository';
import { ProfileCreationDto } from '../profile/dto/ProfileCreationDto';
import { ProfileService } from '../profile/profile.service';
import { UserRepository } from '../user/user.repository';

@Injectable()
export class SeedService {
    constructor(
        private _userRepository: UserRepository,
        private _interestRepository: InterestRepository,
        private _offerRepository: OfferRepository,
        public profileService: ProfileService,
    ) {}

    async generateUsers(n: number): Promise<UserEntity[]> {
        const users = Array.from({ length: n }).map<Partial<UserEntity>>(() => {
            const user = this._userRepository.create();
            const emailDomain = faker.random.arrayElement(
                Object.values(PartnerUniversityDomain),
            );
            user.email =
                faker.internet.email().split('@')[0] + '@' + emailDomain;
            user.password = faker.internet.password();
            user.role = float() < 0.9 ? RoleType.USER : RoleType.ADMIN;
            user.isVerified = float() < 0.8 ? true : false;
            user.onboarded = false;
            user.verificationToken = faker.random.uuid();
            user.locale =
                emailDomain === PartnerUniversityDomain.BREST
                    ? LanguageType.FR
                    : LanguageType.EN;
            user.isAutoGenerated = true;
            return user;
        });

        return this._userRepository.save(users);
    }

    async generateProfiles(
        n: number,
        alreadyGeneratedUsers?: UserEntity[],
    ): Promise<ProfileEntity[]> {
        const users =
            alreadyGeneratedUsers && alreadyGeneratedUsers.length === n
                ? alreadyGeneratedUsers
                : alreadyGeneratedUsers
                ? [
                      ...alreadyGeneratedUsers,
                      ...(await this.generateUsers(
                          n - alreadyGeneratedUsers.length,
                      )),
                  ]
                : await this.generateUsers(n);

        const interests = await this._interestRepository.find();

        const offers = await this._offerRepository.find();

        const profiles = Array.from({ length: n }).map<ProfileCreationDto>(
            (profile: ProfileCreationDto, index) => {
                const emailDomainArray = users[index].email
                    .split('@')[1]
                    .split('.');
                const locale = emailDomainArray[emailDomainArray.length - 1];
                profile = new ProfileCreationDto();
                profile.type = ProfileType.STUDENT;
                profile.firstName = faker.name.firstName();
                profile.lastName = faker.name.lastName();
                profile.gender = faker.random.arrayElement(
                    Object.values(GenderType),
                );
                profile.birthdate = faker.date.between(
                    new Date(1993, 1, 1),
                    new Date(2000, 1, 1),
                );
                profile.educationFields = faker.random
                    .arrayElements(
                        Object.values(EducationFieldType),
                        1 + faker.random.number(2),
                    )
                    .map((x) => ({ id: x }));
                profile.nationality = <NationalityType>locale.toUpperCase();
                profile.languages = [
                    ...new Set([
                        ...faker.random.arrayElements(
                            Object.values(LanguageType),
                            1 + faker.random.number(4),
                        ),
                        <LanguageType>locale,
                    ]),
                ].map((x) => ({
                    code: x,
                    level:
                        x === <LanguageType>locale
                            ? LanguageLevelType.NATIVE
                            : faker.random.arrayElement(
                                  Object.values(LanguageLevelType),
                              ),
                }));
                profile.interests = faker.random.arrayElements(
                    interests.map((x) => x.id),
                    1 + faker.random.number(9),
                );
                profile.degree = faker.random.arrayElement(
                    Object.values(DegreeType),
                );
                profile.profileOffers = faker.random.arrayElements(
                    offers.map(
                        (offer) => ({
                            offerId: offer.id,
                            allowStaff: offer.allowChooseProfileType
                                ? faker.random.boolean()
                                : null,
                            allowStudent: offer.allowChooseProfileType
                                ? faker.random.boolean()
                                : null,
                            allowMale: offer.allowChooseGender
                                ? faker.random.boolean()
                                : null,
                            allowFemale: offer.allowChooseGender
                                ? faker.random.boolean()
                                : null,
                            allowOther: offer.allowChooseGender
                                ? faker.random.boolean()
                                : null,
                        }),
                        faker.random.number(9),
                    ),
                );

                profile.avatar = `https://robohash.org/${profile.firstName}${profile.lastName}`;

                if (float() < 0.7) {
                    profile.type = ProfileType.STUDENT;
                    profile.degree = faker.random.arrayElement(
                        Object.values(DegreeType),
                    );
                } else {
                    profile.type = ProfileType.STAFF;
                    profile.staffRoles = faker.random
                        .arrayElements(Object.values(StaffRoleType))
                        .map((x) => ({
                            id: x,
                        }));
                }

                return profile;
            },
        );

        return Promise.all(
            profiles.map((profile, index) =>
                this.profileService.createOrUpdate(profile, users[index]),
            ),
        );
    }
}
